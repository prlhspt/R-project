df_mpg
# Q3.
df_mpg = mpg %>%
filter(!is.na(drv)& !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty = mean(cty))
mpg <- as.data.frame(ggplot2::mpg)
# Q3.
df_mpg = mpg %>%
filter(!is.na(drv)& !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty = mean(cty))
library(plotly)
library(ggplot2)
library(dplyr)
# Q3.
df_mpg = mpg %>%
filter(!is.na(drv)& !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty = mean(cty))
tt = ggplot(data=df_mpg, aes(x=reorder(drv, -mean_cty), y=mean_cty))+
geom_col(fill=rainbow(3))+coord_flip()
ggplotly(tt)
library(plotly)
install.packages("plotly")
library(plotly)
library(ggplot2)
tt = ggplot(data=df_mpg, aes(x=reorder(drv, -mean_cty), y=mean_cty))+
geom_col(fill=rainbow(3))+coord_flip()
ggplotly(tt)
df_mpg
tt = ggplot(data=df_mpg, aes(x=reorder(drv, -mean_cty), y=mean_cty))+
geom_col(fill=rainbow(3))+coord_flip()
ggplotly(tt)
library(plotly)
install.packages("plotly")
library(plotly)
library(gglot2)
library(ggplot2)
library(plotly)
library(ggplot2)
tt = ggplot(data=df_mpg, aes(x=reorder(drv, -mean_cty), y=mean_cty))+
geom_col(fill=rainbow(3))+coord_flip()
ggplotly(tt)
df_mpg
ggplot(data=df_mpg.aes())
ggplot(data=df_mpg.aes(x=drv,  y=mean_cty))+geom_col()
ggplot(data=df_mpg, aes(x=drv,  y=mean_cty))+geom_col()
ggplot(data=df_mpg, aes(x=drv,  y=mean_cty))+geom_col()+coord_flip()+
ylab("도시연비비")+xlab('구동시간')
ggplot(data=df_mpg, aes(x=drv,  y=mean_cty))+geom_col(fill=rainbow(3))+coord_flip()+
ylab("도시연비비")+xlab('구동시간')
ggplot(data=df_mpg, aes(x=reorder(drv_mean_cty),  y=mean_cty))+geom_col(fill=rainbow(3))+coord_flip()+
ylab("도시연비비")+xlab('구동시간')
ggplot(data=df_mpg, aes(x=reorder(drv.mean_cty),  y=mean_cty))+geom_col(fill=rainbow(3))+coord_flip()+
ylab("도시연비비")+xlab('구동시간')
ggplot(data=df_mpg, aes(x=reorder(drv, mean_cty),  y=mean_cty))+geom_col(fill=rainbow(3))+coord_flip()+
ylab("도시연비비")+xlab('구동시간')
install.packages("plotly")
library(plotly)
install.packages("plotly")
ggplotly(tt)
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(65, 124, 131, 153, 212), "hwy"] <- NA
mpg
library(dplyr)
library(ggplot2)
# Q1.
table(is.na(mpg))
table(is.na(mpg$drv))
table(is.na(mpg$hwy))
# Q2.
mpg %>%
group_by(drv) %>%
filter(!is.na(hwy)) %>%
summarise(mean(hwy, ns.na=T))
# Q1.
mpg <- as.data.frame(ggplot2::mpg)                  # mpg 데이터 불러오기
mpg[c(10, 14, 58, 93), "drv"] <- "k"                # drv 이상치 할당
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42)  # cty 이상치 할당
table(is.na(mpg))
mpg$drv <- ifelse(mpg$drv %in% c(4, "f", "r"), mpg$drv, NA)
# Q2.
boxplot(mpg$cty)$stats
mpg$cty <- ifelse(mpg$cty < 10 | mpg$cty>25,NA, mpg$cty)
table(is.na(mpg$cty))
boxplot(mpg$cty)$stats
# Q3.
df_mpg = mpg %>%
filter(!is.na(drv)& !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty = mean(cty))
df_mpg
install.packages("plotly")
library(plotly)
library(ggplot2)
tt = ggplot(data=df_mpg, aes(x=reorder(drv, -mean_cty), y=mean_cty))+
geom_col(fill=rainbow(3))+coord_flip()
library(ggplot2)
library(ggplot2)
library(plotly)
library(plotly)
library(plotly)
library(plotly)
library(plotly)
library(plotly)
library(plotly)
library(ggplot2)
tt = ggplot(data=df_mpg, aes(x=reorder(drv, -mean_cty), y=mean_cty))+
geom_col(fill=rainbow(3))+coord_flip()
ggplotly(tt)
df_mpg
ggplot(data=df_mpg, aes(x=drv,  y=mean_cty))+geom_col()+coord_flip()+ylab()
install.packages("plotly")
install.packages("plotly")
library(plotly)
library(plotly)
install.packages("plotly")
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point()
library(ggplot2)
library(ggplot)
ggplot(data=df_mpg, aes(x=reorder(drv, mean_cty),  y=mean_cty))+geom_col(fill=rainbow(3))+coord_flip()+
ylab("도시연비비")+xlab('구동시간')
ggplotly(tt)
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point()
install.packages("plotly")
install.packages("plotly")
install.packages(c("backports", "openssl", "processx"))
install.packages("plotly")
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
ggplot(data = mpg, aes(x = displ, y = hwy))+geom_point()+xlim(3, 6)+ylim(10, 20)
midwest=as.data.frame(ggplot2::midwest)
midwest
ggplot(data=midwest.aes(x=poptotal, y=popasian))+geom_point()
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point()
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point()+xlim(0, 5000000)+ylim(0, 10000)
kk=table(mpg$class)
tt=barplot(kk, col=rainbow(8), ylim=c(0, 70))
text(tt, kk, paste0(kk, "대"), pos=3, col=2, cex2)
text(tt, kk, paste0(kk, "대"), pos=3, col=2, cex=2)
text(tt, kk, paste(kk, "대"), pos=3, col=2, cex=2)
text(tt, kk, paste0(kk, "대"), pos=3, col=2, cex=2)
kk=table(mpg$class)
tt=barplot(kk, col=rainbow(8), ylim=c(0, 70))
text(tt, kk, paste(kk, "대"), pos=3, col=2, cex=2)
text(tt, kk, paste0(kk, "대"), pos=3, col=2, cex=2)
tt=barplot(kk, col=rainbow(8), ylim=c(0, 70))
text(tt, kk, paste0(kk, "대"), pos=3, col=2, cex=2)
mpg %>%
filter(class=="suv")
library(ggplot2)
library(dplyr)
mpg %>%
filter(class=="suv")
mpg %>%
filter(class=="suv")
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(ggplot2)
library(plotly)
install.packages("Rtools")
install.packages("plotly")
library(plotly)
install.packages("arules")
install.packages("arulesViz")
setwd("D:/workspace/r/Rdata")
library(arules)
library(arulesViz)
library(arulesViz)
library(arules)
library(arulesViz)
data(package="arules")
data(Groceries)
inspect(Groceries[1:10])
summary(Groceries)
sort(itemFrequency(Groceries, type="absolute", decreasing=T))
sort(itemFrequency(Groceries, type="absolute"), decreasing=T)
round(sort(itemFrequency(Groceries, type="absolute"), decreasing=T), 3)
round(sort(itemFrequency(Groceries, type="relative"), decreasing=T), 3)
itemFrequencyPlot(Groceries, topN=10, type="absolute")
itemFrequencyPlot(Groceries, topN=10, type="relative")
par(mfrow=c(2,1))
itemFrequencyPlot(Groceries, topN=10, type="absolute")
itemFrequencyPlot(Groceries, topN=10, type="relative")
par(mfrow=c(1,2))
itemFrequencyPlot(Groceries, topN=10, type="absolute")
itemFrequencyPlot(Groceries, topN=10, type="relative")
aperiori(Groceries)
apriori(Groceries)
result_rules <- aprioir(Groceries, parameter=list(support=0.005, confidence=0.5, minlen=2))
result_rules <- apriori(Groceries, parameter=list(support=0.005, confidence=0.5, minlen=2))
summary(result_rules)
summary(result_rules[1:5])
inspect(result_rules[1:5])
result_lif=sort(result_rules, by="lift")
result_lif=sort(result_rules, by="lift", decreasing = T)
inspect(result_lif[1:5])
inspect(result_conf[1:5])
result_conf=sort(result_rules, by="confidence", decreasing = T)
inspect(result_conf[1:5])
milk_rule=subset(rules_lift, itesm %in% "whole milk")
result_lift=sort(result_rules, by="lift", decreasing = T)
milk_rule=subset(rules_lift, itesm %in% "whole milk")
milk_rule=subset(result_lift, itesm %in% "whole milk")
milk_rule=subset(result_lift, items %in% "whole milk")
milk_rule
inspect(milk_rule[1:5])
rhs.milk_rule=subset(result_lift, rhs %in% "Whole milk")
rhs.milk_rule=subset(result_lift, rhs %in% "whole milk")
rhs.mil_rule
rhs.milk_rule
inspect(rhs, milk_rule[1:5])
inspect(rhs.milk_rule[1:5])
wholemilk_rule=apriori(Groceries, parameter = list(support=0.005, confidence=0.5,
minlen=2), appearance = list(default="lhs", rhs="whole milk"))
inspect(wholemilk_rule[1:5])
plot(wholemilk_rule[1:10], method = "graph", measure = "lift",
shading = "confidence")
apriori(Groceries)
result_rules <- apriori(Groceries, parameter=list(support=0.005, confidence=0.5, minlen=2))
summary(result_rules)
inspect(result_rules[1:5])
data(package="arules")
data(Groceries)
Grocerie
data(Groceries)
Groceries
inspect(Groceries[1:10])
summary(Groceries)
sort(itemFrequency(Groceries, type="absolute"), decreasing=T)
round(sort(itemFrequency(Groceries, type="relative"), decreasing=T), 3)
par(mfrow=c(1,2))
itemFrequencyPlot(Groceries, topN=10, type="absolute")
itemFrequencyPlot(Groceries, topN=10, type="relative")
apriori(Groceries)
result_rules <- apriori(Groceries, parameter=list(support=0.005, confidence=0.5, minlen=2))
summary(result_rules)
inspect(result_rules[1:5])
result_rules <- apriori(Groceries, parameter=list(support=0.005, confidence=0.5, minlen=2))
summary(result_rules)
inspect(result_rules[1:5])
result_lift=sort(result_rules, by="lift", decreasing = T)
inspect(result_lift[1:5])
result_conf=sort(result_rules, by="confidence", decreasing = T)
inspect(result_conf[1:5])
milk_rule=subset(result_lift, items %in% "whole milk")
milk_rule
inspect(milk_rule[1:5])
rhs.milk_rule=subset(result_lift, rhs %in% "whole milk")
rhs.milk_rule
inspect(rhs.milk_rule[1:5])
wholemilk_rule=apriori(Groceries, parameter = list(support=0.005, confidence=0.5,
minlen=2), appearance = list(default="lhs", rhs="whole milk"))
wholemilk_rule <- sort(wholemilk_rule, by="lift", decreasing = T)
inspect(wholemilk_rule[1:5])
plot(wholemilk_rule[1:10], method = "graph", measure = "lift",
shading = "confidence")
