summary(lm.fit)
lm.fit2=step(lm.fit, method="both")
lm.yhat2 <- predict(lm.fit2, newdata=Boston_test)
lm.fit2=step(lm.fit, method="both")
lm.yhat2 <- predict(lm.fit2, newdata=Boston_test)
kk=mean((lm.yhat2-Boston_test$medv)^2)
sqrt(kk)
class(kk)
res = lm(lm.yhat2~Boston_test$medv)
plot(lm.yhat2, Boston_test$medv)
res = lm(lm.yhat2~Boston_test$medv)
abline(res)
library(tree)
install.packages("tree")
library(tree)
tree.fit <- medv~., data=Boston_trian
tree.fit <- (medv~., data=Boston_trian)
tree.fit <- tre(medv~., data=Boston_trian)
tree.fit <- tree(medv~., data=Boston_trian)
tree.fit <- tree(medv~., data=Boston_train)
summary(tree.fit)
plot(tree.fit)
text(tree.fit, pretty=0)
library(tree)
tree.fit <- tree(medv~., data=Boston_train)
summary(tree.fit)
plot(tree.fit)
text(tree.fit, pretty=0)
tree.yhat <- predict(tree.fit, newdata=Boston_test)
tree.yhat
kk=mean((tree.yhat-Boston_test$medv)^2)
sqrt(kk)
library(rpart)
rpart.fit=rpart(medv~., data=Boston_train)
summary(rpart.fit)
library(rpart.plot)
rpart.plot(rpart.fit.digidts=3, type=0, extra=1, fallen.leaves = F)
rpart.plot(rpart.fit.digidts=3, type=0, extra=1, fallen.leaves = F)
rpart.plot(rpart.fit, digidts=3, type=0, extra=1, fallen.leaves = F)
rpart.plot(rpart.fit, digits=3, type=0, extra=1, fallen.leaves = F)
rpart.plot(rpart.fit, digits=3, type=0, extra=1, fallen.leaves = F, cex=1)
rpart.yhat <- predict(rpart.fit, newdata = Boston_test)
(rpart.yhat-Boston_test$medv)^2
mean((rpart.yhat-Boston_test$medv)^2)
kk=mean((rpart.yhat-Boston_test$medv)^2)
sqrt(kk)
# ANN method
normalize=function(x){return((x-min(x))/max(x)-min(x))}
Boston_train_norm <- as.data.frame(sapply(Boston_train, normalize))
Boston_train_norm
Boston_test_norm <- as.data.frame(sapply(Boston_test, normalize))
library(nnet)
nnet.yhat <- predict(nnet.fit, newdata=Boston_test_norm, type="raw")
nnet.fit=nnet(medv~., data=Boston_train_norm.size=5)
nnet.yhat <- predict(nnet.fit, newdata=Boston_test_norm, type="raw")
nnet.fit = nnet(medv~., data=Boston_train_norm.size=5)
nnet.fit <-  nnet(medv~., data=Boston_train_norm.size=5)
nnet.fit <-  nnet(medv~., data=Boston_train_norm, size=5)
nnet.yhat <- predict(nnet.fit, newdata=Boston_test_norm, type="raw")
mean((nnet.yyhat-Boston_test_norm$medv)^2)
mean((nnet.yhat-Boston_test_norm$medv)^2)
nnet.fit <-  nnet(medv~., data=Boston_train_norm, size=5)
nnet.yhat <- predict(nnet.fit, newdata=Boston_test_norm, type="raw")
mean((nnet.yhat-Boston_test_norm$medv)^2)
sqrt(kk)
kk=mean((nnet.yhat-Boston_test_norm$medv)^2)
sqrt(kk)
library(neuralnet)
install.packages("neuralnet")
library(neuralnet)
naural.fit <- nauralnet(medv~, data=Boston_train_norm, hidden=5)
naural.fit <- nauralnet(medv~., data=Boston_train_norm, hidden=5)
naural.fit <- neuralnet(medv~., data=Boston_train_norm, hidden=5)
neural.yhat <- neural.results$net.result
naural.fit <- neuralnet(medv~., data=Boston_train_norm, hidden=5)
neural.results <- compte(neural.fit, Boston_tets_norm[1:13])
neural.yhat <- neural.results$net.result
neural.yhat <- neural.results$net.result
neural.yhat <- neural.results$net.result
neural.results <- compte(neural.fit, Boston_tets_norm[1:13])
naural.fit <- neuralnet(medv~., data=Boston_train_norm, hidden=5)
neural.results <- compute(neural.fit, Boston_tets_norm[1:13])
neural.yhat <- neural.results$net.result
mean((neural.yhat-Boston_test_norm$medv)^2)
neural.yhat <- neural.results$net.result
neural.results <- compute(neural.fit, Boston_tets_norm[1:13])
naural.fit <- neuralnet(medv~., data=Boston_train_norm, hidden=5)
neural.results <- compute(neural.fit, Boston_tets_norm[1:13])
neural.results <- compute(neural.fit, Boston_tets_norm[1:13])
neural.yhat <- neural.results$net.result
mean((neural.yhat-Boston_test_norm$medv)^2)
neural.results <- compute(neural.fit, Boston_tets_norm[1:13])
naural.fit <- neuralnet(medv~., data=Boston_train_norm, hidden=5)
View(naural.fit)
install.packages("neuralnet")
library(neuralnet)
naural.fit <- neuralnet(medv~., data=Boston_train_norm, hidden=5)
neural.fit <- neuralnet(medv~., data=Boston_train_norm, hidden=5)
neural.results <- compute(neural.fit, Boston_tets_norm[1:13])
neural.yhat <- neural.results$net.result
neural.yhat <- neural.results$net.result
neural.yhat <- neural.results$net.result
neural.results <- compute(neural.fit, Boston_tets_norm[1:13])
neural.results <- compute(neural.fit, Boston_tests_norm[1:13])
neural.results <- compute(neural.fit, Boston_test_norm[1:13])
neural.fit <- neuralnet(medv~., data=Boston_train_norm, hidden=5)
neural.results <- compute(neural.fit, Boston_test_norm[1:13])
neural.yhat <- neural.results$net.result
mean((neural.yhat-Boston_test_norm$medv)^2)
kk=mean((neural.yhat-Boston_test_norm$medv)^2)
sqrt(kk)
plot(neural.fit)
nnet.fit <-  nnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat, data=Boston_train_norm, size=5)
nnet.fit <-  nnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat, data=Boston_train_norm, hidden=5)
nnet.fit <-  nnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat, data=Boston_train_norm, hidden=5)
nnet.fit <-  nnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat, data=Boston_train_norm, size=5)
nnet.yhat <- predict(nnet.fit, newdata=Boston_test_norm, type="raw")
neural.fit <- neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat, data=Boston_train_norm, hidden=5)
neural.results <- compute(neural.fit, Boston_test_norm[1:13])
neural.results <- compute(neural.fit, Boston_test_norm[1:13])
neural.yhat <- neural.results$net.result
kk=mean((neural.yhat-Boston_test_norm$medv)^2)
sqrt(kk)
plot(neural.)
sqrt(kk)
kk=mean((neural.yhat-Boston_test_norm$medv)^2)
sqrt(kk)
plot(neural.fit)
library(randomForest)
set.seed(1)
rf.fit=randomForest(medv~., data=Boston_train)
rf.fit=randomForest(medv~., data=Boston_train, mtry=6, importance=T)
rf.fit
plot(rf.fit)
rf.fit=randomForest(medv~., data=Boston_train, mtry=6, importance=T)
plot(rf.fit)
importance(rf.fit)
varImplot(rf.fit)
varImpPlot(rf.fit)
rf.yhat <- predict(rf.fit, newdata=Boston_test)
mean(rf.yhat-Boston_test$medv)^2)
mean((rf.yhat-Boston_test$medv)^2)
sqrt(kk)
iris2=iris[,1:4]
iris2
km.put.withness
km.out.withness
km.out.withness=c()
km.out.between=c()
km.out.withness <- c()
km.out.between <- c()
km.out.between[i-1] <- km.out$betweenss
km.out <- kmeans(iris2, centers=i)
for(i in 2:7){
set.seed(1)
km.out <- kmeans(iris2, centers=i)
km.out.withness[i-1] <- km.out$tot.withinss
km.out.between[i-1] <- km.out$betweenss
}
data.frame(km.out.withness, km.out.between)
late = c(5,8,7,9,4,6,12,13,8,6,6,4)
month = 1:12
ylab="Late cnt" # y축 레이블
ylab="Late cnt" # y축 레이블)
plot(month, # x data
late, # y data
main="Late students",
type= "l", # 그래프의 종류 선택(알파벳)
lty=1, # 선의 종류(line type) 선택
lwd=1, # 선의 굵기 선택
xlab="Month ", # x축 레이블
ylab="Late cnt" # y축 레이블
)
for(i in 2:7){
set.seed(1)
km.out <- kmeans(iris2, centers=i)
km.out.withness[i] <- km.out$tot.withinss
km.out.between[i] <- km.out$betweenss
}
data.frame(km.out.withness, km.out.between)
for(i in 2:7){
set.seed(1)
km.out <- kmeans(iris2, centers=i)
km.out.withness[i-1] <- km.out$tot.withinss
km.out.between[i-1] <- km.out$betweenss
kk=c(kk, (paste0("k=",i)))
}
data.frame(km.out.withness, km.out.between)
data.frame(kk, km.out.withness, km.out.between)
for(i in 2:7){
set.seed(1)
km.out <- kmeans(iris2, centers=i)
km.out.withness[i-1] <- km.out$tot.withinss
km.out.between[i-1] <- km.out$betweenss
kk <- c(kk, (paste0("k=",i)))
}
data.frame(kk, km.out.withness, km.out.between)
data.frame(kk, km.out.withness, km.out.between)
for(i in 2:7){
set.seed(1)
km.out <- kmeans(iris2, centers=i)
km.out.withness[i-1] <- km.out$tot.withinss
km.out.between[i-1] <- km.out$betweenss
kk <- c(kk, (paste0("k=",i)))
}
data.frame(kk, km.out.withness, km.out.between)
kk=0
for(i in 2:7){
set.seed(1)
km.out <- kmeans(iris2, centers=i)
km.out.withness[i-1] <- km.out$tot.withinss
km.out.between[i-1] <- km.out$betweenss
kk <- c(kk, (paste0("k=",i)))
}
data.frame(kk, km.out.withness, km.out.between)
kk <- c()
for(i in 2:7){
set.seed(1)
km.out <- kmeans(iris2, centers=i)
km.out.withness[i-1] <- km.out$tot.withinss
km.out.between[i-1] <- km.out$betweenss
kk <- c(kk, (paste0("k=",i)))
}
data.frame(kk, km.out.withness, km.out.between)
kk <- c()
for(i in 2:7){
set.seed(1)
km.out <- kmeans(iris2, centers=i)
km.out.withness[i-1] <- km.out$tot.withinss
km.out.between[i-1] <- km.out$betweenss
kk <- c(kk, (paste0("k=",i)))
}
data.frame(kk, km.out.withness, km.out.between)
iris2=iris[,1:4]
iris2
km.out.withness <- c()
km.out.between <- c()
kk <- c()
for(i in 2:7){
set.seed(1)
km.out <- kmeans(iris2, centers=i)
km.out.withness[i-1] <- km.out$tot.withinss
km.out.between[i-1] <- km.out$betweenss
kk <- c(kk, (paste0("k=",i)))
}
tt= data.frame(kk, km.out.withness, km.out.between)
tt
tt= data.frame(kk, km.out.withness, km.out.between)
plot(kk=c(1:7), tt$km.out.withness, type='b')
plot(kk=c(1:7), tt$km.out.between, type='b')
par(mfrow=c(1,2))
plot(kk=c(1:7), tt$km.out.withness, type='b')
plot(kk=c(1:7), tt$km.out.between, type='b')
month = 1:12
late1 = c(5,8,7,9,4,6,12,13,8,6,6,4)
late2 = c(4,6,5,8,7,8,10,11,6,5,7,3)
month = 1:12
late1 = c(5,8,7,9,4,6,12,13,8,6,6,4)
late2 = c(4,6,5,8,7,8,10,11,6,5,7,3)
plot(month, # x data
late1, # y data
main="Late students",
type= "b", # 그래프의 종류 선택(알파벳).
lty=1, # 선의 종류(line type) 선택
col="red", # 선의 색깔 선택
xlab="Month ", # x축 레이블
ylab="Late cnt" # y축 레이블
)
km.out.k3=kmeans(iris2, centers=3)
km.out.k3$centers
lines(month, late2, type = "b", col = "blue")
km.out.k3$cluster
km.out.k3$size
table(km.out.k3$cluster, iris$Species)
years = 2015:2026
Population = c(51014, 51245, 51446, 51635, 51811, 51973, 52123, 52261,
52388, 52504, 52609, 52704)
plot(years, Population,
main="2015년부터 2026년까지 예상 인구수",
type="l",
lty=5,
col="deeppink2",
xlab = "years",
ylab = "Population")
years = 2015:2026
Population = c(51014, 51245, 51446, 51635, 51811, 51973, 52123, 52261,
52388, 52504, 52609, 52704)
plot(years, Population,
main="2015년부터 2026년까지 예상 인구수",
type="l",
lty=5,
col="deeppink2",
xlab = "years",
ylab = "Population")
years2 = c(20144, 20151, 20152, 20153, 20154, 20161, 20162, 20163,
20164, 20171, 20172, 20173)
man = c(73.9, 73.1, 74.4, 74.2, 73.5, 73.0, 74.2, 74.5, 73.8,
73.1, 74.5, 74.2)
woman = c(51.4, 50.5, 52.4, 52.4, 51.9, 50.9, 52.6, 52.7, 52.2,
51.5, 53.2, 53.1)
plot(years2, man,
main = "남녀의 경제활동참가율 통계",
type = "b",
lty = 1,
ylim = c(min(woman), max(man)),
col = "red3",
xlab = "years",
ylab = "man")
lines(years2, woman,
type = "b",
col = "blue3")
km.out.ke$cluster==2, 17, 18)), cex=2) ;
plot(iris2[,1:2], col=km.out.k3$cluster, pch=ifelse(km.out.k3$cluster==1, 16, ifelse
(km.out.ke$cluster==2, 17, 18)), cex=2) ;
(km.out.k3$cluster==2, 17, 18)), cex=2) ;
plot(iris2[,1:2], col=km.out.k3$cluster, pch=ifelse(km.out.k3$cluster==1, 16, ifelse
(km.out.k3$cluster==2, 17, 18)), cex=2) ;
points(km.out.k3$centers, col=1:3, pch=16:18, cex=5)
points(km.out.k3$centers, col=1:3, pch=16:18, cex=5)
points(km.out.k3$centers, col=1:3, pch=16:18, cex=5)
points(km.out.k3$centers, col=1:3, pch=16:18, cex=5)
point <- as.numeric(iris$Species) # 포인트 모양
color <- c("red","green","blue") # 포인트 컬러
pairs(iris[,-5], pch=c(point), col=color[iris[,5]] )
pairs(iris[,5], pch=c(point), col=color[iris[,5]] )
pairs(iris[,-5], pch=c(point), col=color[iris[,-5]] )
pairs(iris[,-5], pch=c(point), col=color[iris[,5]] )
USArrests
pcl=princomp(USArrests, cor=T)
plot(pcl)
pcl$center
pcl$center
pcl$scale
pcl$loadings
summary(pcl)
pcl$scores
summary(pcl)
plot(pcl$scores[, 1], pcl$scores[,2], xlab="Z1", ylab="Z2")
abline(v=0, h=0, col="gray")
biplot(pc1, cex=0.7)
biplot(PC1, cex=0.7)
biplot(pcl, cex=0.7)
setwd("C:/Users/LimHyunSeok/Documents/workspace/R-project/Rdata")
setwd("D:/workspace/r/Rdata")
data=read.csv("sales_data_new.csv")
setwd("D:/workspace/r/Rdata")
data=read.csv("sales_data_new.csv")
data
data[:60]
data[1:60]
data
class(data)
data[1:60]
data[1:60,]
healthy <- data[1:60,]
fruit <- data[61:120,]
tea <- data[120:,]
tea <- data[:180,]
tea <- data[121:180,]
View(fruit)
pairs(healthy)
target <- state.x77
target
class(target)
pairs(target, main = "변수간 산점도 상관관계")
health <- data[1:60,]
class(health)
pairs(as.matrix(healthy))
pairs(as.matrix(health))
class(as.matrix(health))
target = as.matrix(health)
class(health)
class(target)
pairs(target)
pairs(target, main = "변수간 산점도 상관관계")
target
target
target <- state.x77
class(target)
target
View(target)
health <- data[1:60,]
fruit <- data[61:120,]
tea <- data[121:180,]
target = as.matrix(health)
class(target)
target
View(target)
pairs(target, main = "변수간 산점도 상관관계")
target <- state.x77
pairs(target, main = "변수간 산점도 상관관계")
target
class(iris)
pairs(health[, -5])
health
View(health)
plot(PRICE~., data=health)
plot(PRICE~., data=health)
plot(PRICE~., data=health)
vars <- c("YM", "ITEM_CNT", "QTY", "MAXTEMP", "SALEDAY","RAIN_DAY","HOLIDAY")
target <- health[,vars]
plot(target, main="Multi plots")
plot(price~target, main="Multi plots")
plot(price~Y)
plot(PRICE~target, main="Multi plots")
plot("PRICE"~target, main="Multi plots")
View(health)
target
PRICE
health$PRICE
plot(health$PRICE~target, main="Multi plots")
plot(health$PRICE~YM, main="Multi plots")
plot(health$PRICE~helath$YM, main="Multi plots")
plot(health$PRICE~health$YM, main="Multi plots")
plot(health$PRICE~health$ITEM_CNT, main="Multi plots")
par(mfrow=c(4,2))
plot(health$PRICE~health$YM, main="Multi plots")
plot(health$PRICE~health$ITEM_CNT, main="Multi plots")
par(mfrow=c(2,4))
plot(health$PRICE~health$YM, main="Multi plots")
plot(health$PRICE~health$ITEM_CNT, main="Multi plots")
plot(health$PRICE~health$YM)
plot(health$PRICE~health$ITEM_CNT)
plot(health$PRICE~health$ITEM_CNT)
par(mfrow=c(2,4))
plot(health$PRICE~health$YM)
plot(health$PRICE~health$ITEM_CNT)
plot(health$PRICE~health$QTY)
plot(health$PRICE~health$MAXTEMP)
plot(health$PRICE~health$SALEDAY)
plot(health$PRICE~health$RAIN_DAY)
plot(health$PRICE~health$HOLIDAY)
shapiro.test(data)
shapiro.test(data$PRICE)
for i in c("YM", "ITEM_CNT", "PRICE", "QTY", "MAXTEMP", "SALEDAY","RAIN_DAY","HOLIDAY"){
shapiro.test(data$i)
}
for i in c("YM", "ITEM_CNT", "PRICE", "QTY", "MAXTEMP", "SALEDAY","RAIN_DAY","HOLIDAY"){
shapiro.test(data$i)
}
for (i in c("YM", "ITEM_CNT", "PRICE", "QTY", "MAXTEMP", "SALEDAY","RAIN_DAY","HOLIDAY")){
shapiro.test(data$i)
}
i
for i in "YM"{
i
}
for (i in "YM"){
i
}
for (i in "YM"){
summary(i)
}
i
for (i in "YM", "ITEM_CNT"){
print(i)
}
for (i in ("YM", "ITEM_CNT")){
print(i)
}
for (i in c("YM", "ITEM_CNT")){
print(i)
}
for (i in c("YM", "ITEM_CNT")){
print(data$i)
}
data$YM
data$"YM"
data$"YM"
for (i in c("YM", "ITEM_CNT")){
print(data$i)
}
shapiro.test(data$PRICE)
shapiro.test(data$PRICE, data$ITEM_CNT)
shapiro.test(data$PRICE)
shapiro.test(data$YM)
shapiro.test(data$ITEM_CNT)
shapiro.test(data$QTY)
shapiro.test(data$MAXTEMP)
shapiro.test(data$SALEDAY)
shapiro.test(data$RAIN_DAY)
shapiro.test(data$HOLIDAY)
library(caret)
train.idx <- createDataPartition(iris$Species, p=0.7, list=F)
iris_train <- iris[train.idx,]
table(iris_train$Species)
iris_test <- iris[-train.idx,]
table(iris_test$Species)
vars <- c("YM", "ITEM_CNT", "PRICE", "MAXTEMP", "SALEDAY","RAIN_DAY","HOLIDAY")
target <- health[,vars]
target
health$PRICE
par(mfrow=c(2,4))
plot(health$QTY~health$YM)
plot(health$QTY~health$ITEM_CNT)
plot(health$QTY~health$PRICE)
plot(health$QTY~health$MAXTEMP)
plot(health$QTY~health$SALEDAY)
plot(health$QTY~health$RAIN_DAY)
plot(health$QTY~health$HOLIDAY)
cor(health[, 1:7])
iris[,1:4]
class(iris[,1:4])
health[,1:7]
health[,1:9]
health[,1:10]
health[,1:11]
health[,1:10]
health[,5:10]
cor(health[, 5:10])
cor(fruit[, 5:10])
cor(tea[, 5:10])
